/* This file was generated by SableCC (http://www.sablecc.org/). */

package dotparse.analysis;

import java.util.*;
import dotparse.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPRoot().apply(this);
        outStart(node);
    }

    public void inADigraphRoot(ADigraphRoot node)
    {
        defaultIn(node);
    }

    public void outADigraphRoot(ADigraphRoot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADigraphRoot(ADigraphRoot node)
    {
        inADigraphRoot(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDigraph() != null)
        {
            node.getDigraph().apply(this);
        }
        outADigraphRoot(node);
    }

    public void inALinesLine(ALinesLine node)
    {
        defaultIn(node);
    }

    public void outALinesLine(ALinesLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALinesLine(ALinesLine node)
    {
        inALinesLine(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALinesLine(node);
    }

    public void inAArrowLine(AArrowLine node)
    {
        defaultIn(node);
    }

    public void outAArrowLine(AArrowLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrowLine(AArrowLine node)
    {
        inAArrowLine(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAArrowLine(node);
    }

    public void inATextLine(ATextLine node)
    {
        defaultIn(node);
    }

    public void outATextLine(ATextLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextLine(ATextLine node)
    {
        inATextLine(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATextLine(node);
    }

    public void inANodeLine(ANodeLine node)
    {
        defaultIn(node);
    }

    public void outANodeLine(ANodeLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANodeLine(ANodeLine node)
    {
        inANodeLine(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getNode() != null)
        {
            node.getNode().apply(this);
        }
        outANodeLine(node);
    }

    public void inAEmptyLine(AEmptyLine node)
    {
        defaultIn(node);
    }

    public void outAEmptyLine(AEmptyLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLine(AEmptyLine node)
    {
        inAEmptyLine(node);
        outAEmptyLine(node);
    }

    public void inAIdsText(AIdsText node)
    {
        defaultIn(node);
    }

    public void outAIdsText(AIdsText node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdsText(AIdsText node)
    {
        inAIdsText(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdsText(node);
    }

    public void inAListText(AListText node)
    {
        defaultIn(node);
    }

    public void outAListText(AListText node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListText(AListText node)
    {
        inAListText(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListText(node);
    }

    public void inAElementList(AElementList node)
    {
        defaultIn(node);
    }

    public void outAElementList(AElementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementList(AElementList node)
    {
        inAElementList(node);
        if(node.getElements() != null)
        {
            node.getElements().apply(this);
        }
        outAElementList(node);
    }

    public void inAEleElements(AEleElements node)
    {
        defaultIn(node);
    }

    public void outAEleElements(AEleElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEleElements(AEleElements node)
    {
        inAEleElements(node);
        if(node.getEle() != null)
        {
            node.getEle().apply(this);
        }
        outAEleElements(node);
    }

    public void inACommaElements(ACommaElements node)
    {
        defaultIn(node);
    }

    public void outACommaElements(ACommaElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaElements(ACommaElements node)
    {
        inACommaElements(node);
        if(node.getElements() != null)
        {
            node.getElements().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEle() != null)
        {
            node.getEle().apply(this);
        }
        outACommaElements(node);
    }

    public void inAAssignmentEle(AAssignmentEle node)
    {
        defaultIn(node);
    }

    public void outAAssignmentEle(AAssignmentEle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentEle(AAssignmentEle node)
    {
        inAAssignmentEle(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAssignmentEle(node);
    }

    public void inAStringEle(AStringEle node)
    {
        defaultIn(node);
    }

    public void outAStringEle(AStringEle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringEle(AStringEle node)
    {
        inAStringEle(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAStringEle(node);
    }

    public void inANumberEle(ANumberEle node)
    {
        defaultIn(node);
    }

    public void outANumberEle(ANumberEle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberEle(ANumberEle node)
    {
        inANumberEle(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANumberEle(node);
    }
}
