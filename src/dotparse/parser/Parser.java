/* This file was generated by SableCC (http://www.sablecc.org/). */

package dotparse.parser;

import dotparse.lexer.*;
import dotparse.node.*;
import dotparse.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PRoot node1 = (PRoot) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADigraphRoot */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ALinesLine */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AArrowLine */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ATextLine */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ANodeLine */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AEmptyLine */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AIdsText */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AListText */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AElementList */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AEleElements */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ACommaElements */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAssignmentEle */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AStringEle */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ANumberEle */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADigraphRoot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoot prootNode1;
        {
            // Block
        TDigraph tdigraphNode2;
        TId tidNode3;
        PLine plineNode4;
        tdigraphNode2 = (TDigraph)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        plineNode4 = (PLine)nodeArrayList4.get(0);

        prootNode1 = new ADigraphRoot(tdigraphNode2, tidNode3, plineNode4);
        }
	nodeList.add(prootNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ALinesLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TId tidNode2;
        TArrow tarrowNode3;
        TId tidNode4;
        PLine plineNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        plineNode5 = (PLine)nodeArrayList5.get(0);

        plineNode1 = new ALinesLine(tidNode2, tarrowNode3, tidNode4, plineNode5);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AArrowLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TId tidNode2;
        TArrow tarrowNode3;
        TId tidNode4;
        PText ptextNode5;
        PLine plineNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        ptextNode5 = (PText)nodeArrayList4.get(0);
        plineNode6 = (PLine)nodeArrayList6.get(0);

        plineNode1 = new AArrowLine(tidNode2, tarrowNode3, tidNode4, ptextNode5, plineNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATextLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TId tidNode2;
        PText ptextNode3;
        PLine plineNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptextNode3 = (PText)nodeArrayList2.get(0);
        plineNode4 = (PLine)nodeArrayList4.get(0);

        plineNode1 = new ATextLine(tidNode2, ptextNode3, plineNode4);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ANodeLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TNode tnodeNode2;
        PText ptextNode3;
        PLine plineNode4;
        tnodeNode2 = (TNode)nodeArrayList1.get(0);
        ptextNode3 = (PText)nodeArrayList2.get(0);
        plineNode4 = (PLine)nodeArrayList4.get(0);

        plineNode1 = new ANodeLine(tnodeNode2, ptextNode3, plineNode4);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEmptyLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLine plineNode1;
        {
            // Block

        plineNode1 = new AEmptyLine();
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIdsText */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PText ptextNode1;
        {
            // Block
        TId tidNode2;
        PText ptextNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptextNode3 = (PText)nodeArrayList2.get(0);

        ptextNode1 = new AIdsText(tidNode2, ptextNode3);
        }
	nodeList.add(ptextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AListText */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PText ptextNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        ptextNode1 = new AListText(plistNode2);
        }
	nodeList.add(ptextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AElementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        PElements pelementsNode2;
        pelementsNode2 = (PElements)nodeArrayList2.get(0);

        plistNode1 = new AElementList(pelementsNode2);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AEleElements */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElements pelementsNode1;
        {
            // Block
        PEle peleNode2;
        peleNode2 = (PEle)nodeArrayList1.get(0);

        pelementsNode1 = new AEleElements(peleNode2);
        }
	nodeList.add(pelementsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACommaElements */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElements pelementsNode1;
        {
            // Block
        PEle peleNode2;
        TComma tcommaNode3;
        PElements pelementsNode4;
        peleNode2 = (PEle)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pelementsNode4 = (PElements)nodeArrayList3.get(0);

        pelementsNode1 = new ACommaElements(peleNode2, tcommaNode3, pelementsNode4);
        }
	nodeList.add(pelementsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAssignmentEle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEle peleNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        peleNode1 = new AAssignmentEle(tidNode2, tassignmentNode3, tidNode4);
        }
	nodeList.add(peleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AStringEle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEle peleNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TString tstringNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tstringNode4 = (TString)nodeArrayList3.get(0);

        peleNode1 = new AStringEle(tidNode2, tassignmentNode3, tstringNode4);
        }
	nodeList.add(peleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANumberEle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEle peleNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TNumber tnumberNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);

        peleNode1 = new ANumberEle(tidNode2, tassignmentNode3, tnumberNode4);
        }
	nodeList.add(peleNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {6, SHIFT, 3}, },
			{{-1, ERROR, 2}, {13, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {2, SHIFT, 4}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 5}, {6, SHIFT, 6}, },
			{{-1, ERROR, 5}, {4, SHIFT, 8}, {6, SHIFT, 9}, },
			{{-1, ERROR, 6}, {4, SHIFT, 8}, {6, SHIFT, 9}, {10, SHIFT, 12}, },
			{{-1, ERROR, 7}, {3, SHIFT, 14}, },
			{{-1, ERROR, 8}, {6, SHIFT, 15}, },
			{{-1, ERROR, 9}, {4, SHIFT, 8}, {6, SHIFT, 9}, },
			{{-1, ERROR, 10}, {9, SHIFT, 19}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 12}, {6, SHIFT, 20}, },
			{{-1, ERROR, 13}, {9, SHIFT, 21}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 15}, {7, SHIFT, 22}, },
			{{-1, ERROR, 16}, {5, SHIFT, 23}, },
			{{-1, REDUCE, 9}, {8, SHIFT, 24}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 5}, {6, SHIFT, 6}, },
			{{-1, ERROR, 20}, {4, SHIFT, 8}, {6, SHIFT, 9}, {9, SHIFT, 26}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 5}, {6, SHIFT, 6}, },
			{{-1, ERROR, 22}, {6, SHIFT, 29}, {11, SHIFT, 30}, {12, SHIFT, 31}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 24}, {6, SHIFT, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 5}, {6, SHIFT, 6}, },
			{{-1, ERROR, 27}, {9, SHIFT, 34}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 5}, {6, SHIFT, 6}, },
			{{-1, REDUCE, 2}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {19, 25}, {21, 28}, {26, 33}, {34, 35}, },
			{{-1, 10}, {6, 13}, {9, 18}, {20, 27}, },
			{{-1, 11}, },
			{{-1, 16}, {24, 32}, },
			{{-1, 17}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'digraph'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '{'",
			"expecting: 'node', '}', id",
			"expecting: '[', id",
			"expecting: '[', id, '->'",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: '='",
			"expecting: ']'",
			"expecting: ']', ','",
			"expecting: '[', id, ';'",
			"expecting: id, number, string",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 1, 5, 8, 8, 1, 8, 2, 9, 10, 11, 8, 4, 12, 4, 13, 8, 1, 7, 4, 8, 7, 11, 11, 11, 10, 7, 4, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
