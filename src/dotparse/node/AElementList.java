/* This file was generated by SableCC (http://www.sablecc.org/). */

package dotparse.node;

import dotparse.analysis.*;

@SuppressWarnings("nls")
public final class AElementList extends PList
{
    private PElements _elements_;

    public AElementList()
    {
        // Constructor
    }

    public AElementList(
        @SuppressWarnings("hiding") PElements _elements_)
    {
        // Constructor
        setElements(_elements_);

    }

    @Override
    public Object clone()
    {
        return new AElementList(
            cloneNode(this._elements_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElementList(this);
    }

    public PElements getElements()
    {
        return this._elements_;
    }

    public void setElements(PElements node)
    {
        if(this._elements_ != null)
        {
            this._elements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elements_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elements_ == child)
        {
            this._elements_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elements_ == oldChild)
        {
            setElements((PElements) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
