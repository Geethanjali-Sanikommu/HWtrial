/* This file was generated by SableCC (http://www.sablecc.org/). */

package dotparse.node;

import dotparse.analysis.*;

@SuppressWarnings("nls")
public final class ADigraphRoot extends PRoot
{
    private TDigraph _digraph_;
    private TId _id_;
    private PLine _line_;

    public ADigraphRoot()
    {
        // Constructor
    }

    public ADigraphRoot(
        @SuppressWarnings("hiding") TDigraph _digraph_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PLine _line_)
    {
        // Constructor
        setDigraph(_digraph_);

        setId(_id_);

        setLine(_line_);

    }

    @Override
    public Object clone()
    {
        return new ADigraphRoot(
            cloneNode(this._digraph_),
            cloneNode(this._id_),
            cloneNode(this._line_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADigraphRoot(this);
    }

    public TDigraph getDigraph()
    {
        return this._digraph_;
    }

    public void setDigraph(TDigraph node)
    {
        if(this._digraph_ != null)
        {
            this._digraph_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._digraph_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PLine getLine()
    {
        return this._line_;
    }

    public void setLine(PLine node)
    {
        if(this._line_ != null)
        {
            this._line_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._line_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._digraph_)
            + toString(this._id_)
            + toString(this._line_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._digraph_ == child)
        {
            this._digraph_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._line_ == child)
        {
            this._line_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._digraph_ == oldChild)
        {
            setDigraph((TDigraph) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._line_ == oldChild)
        {
            setLine((PLine) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
